jsPlumb.ready(function() {
    /**
     * 获取基本参数，如果参数有误直接抛错
     */
    var urlparams = function(){
        var ret = {};
        try{
            var params = location.search.substr(1).split('&');
            for(var i=0; i<params.length; i++){
                var keyvalue = params[i].split('=');
                ret[keyvalue[0]] = keyvalue[1];
            }
        }catch(e){
            console.debug(e);
        }
        return ret;
    }(),
    rdpdir = urlparams['rdpdir'],
    stepid = urlparams['stepid'],
    postionConfPath = localStorage.getItem('projectDir') + '/.ide/position/'+stepid+'.position';

    
    if(!rdpdir || !stepid){
        throw new Error("参数错误,stepip="+stepid+",rdpdir="+rdpdir);
        return;
    }

    var fs = parent.require('fs');
    var iconv = parent.require('iconv-lite');
    var ipcRenderer = parent.require('electron').ipcRenderer;
    //var TransClassDef = parent.require('../../common/getTransClassDef.js');

    var filePath = rdpdir + "/" + stepid + ".xml";
    var stepModel;
    var lastpostionstr='';
    var defaultLeft = '900px';
    var defaultTop = '500px';
    var instance = jsPlumb.getInstance({
        DragOptions : { cursor: "pointer", zIndex:2000 },//拖动时的演示
        HoverClass:"connector-hover" //hover时线样式
    });
    var stateMachineConnector = {
        connector:"StateMachine",
        paintStyle:{lineWidth:3,strokeStyle:"#056"},
        hoverPaintStyle:{strokeStyle:"#dbe300"},
        endpoint:"Blank",
        anchor:"Continuous",
        overlays:[ ["PlainArrow", {location:1, width:15, length:12} ]]
    };
    var windowData ='';// 数据模型
    var windowData_bak = '';
    var clickId ='';//当前点击的节点
    var param_id ='';//参数名
    var param_value ='';//参数值
    var return_id  ='';//返回参数
    var return_param = '';//返回值
	var rightClick = "";//右击的节点
    var AddSign;//1在右击之前添加;2在右击之后添加 
    var line_a,line_b;//连线的A、B
    var newNode='';//空白节点的id
    /**
     * 初始化
     */
    function initApp(argument) {

    window.onresize = function(){//浏览器大小改变时触发事件
        var nodeViewWidth = parent.$('body').width()-$('#node-edit').width();
        $("#node-view").width(nodeViewWidth);
    }

    document.title = filePath;
    initConfigDir();

    $("#resetPosition").click(resetPosition);

    
    windowData = executeStep(filePath,windowData);
    windowData_bak = (new XMLSerializer()).serializeToString(windowData);

    document.querySelectorAll('.CallStep a, .JumpStep a').forEach(function(dom){
        var mouseOper = null;
        dom.addEventListener('mousedown', function(){ 
            mouseOper = "mousedown"; 
        });
        dom.addEventListener('mousemove', function(){ 
            if(mouseOper === "mousedown") mouseOper = "mousemove"; 
        });
        dom.addEventListener('mouseup', function(){ 
            if(mouseOper === "mousedown") openStepview(this.id); mouseOper = null; 
        });
    });
		 
    //节点内容的操作
     var oldValue;//改变之前的值
    $('#node-edit').on('click',function(e){
		oldValue = e.target.value;
		try{
			if(e.target.className ==='add_nodeparam'){//节点参数的添加
			  window.addNodeparam();
              executeStep(filePath,windowData);
			}
			if( e.target.className ==='add_nodereturn'){//节点返回值的添加
			  window.addNodereturn();
              executeStep(filePath,windowData);
			}
			if( e.target.className ==='del_nodeparam'){//节点参数信息的删除
			  var oldnodeHtml =windowData.getElementsByTagName(clickId)[0];
			   console.info(clickId);
				del_Nodeparam(e,oldnodeHtml);
                executeStep(filePath,windowData);
			} 
			if( e.target.className ==='del_nodereturn'){//节点返回信息的删除
				var oldnodeHtml =windowData.getElementsByTagName(clickId)[0];
				del_Nodereturn(e,oldnodeHtml);
                executeStep(filePath,windowData);
			}
		}catch(e){ console.debug(e);}
    });

	
	 $("#nodeinfo").on('change',function(e){
           var newValue  = e.target.value;//改变之后的值
				if(e.target.id === 'nodeinfo-id'){//节点名
				   if (rightClick !="") {
                        var parentObjxml = windowData.children[0];
                        var rightClickHtml =windowData.getElementsByTagName(rightClick)[0];//右击的

                      if(AddSign === "1" ){//在之前添加节点

                        var newnodeHtml =  creatNodeFormat(rightClickHtml,newValue);
                            parentObjxml.insertBefore(newnodeHtml,rightClickHtml);
                            clickId = newValue;
                            //前一个节点返回值要添加这个节点
                            // console.info('----1.1---');
                            executeStep(filePath,windowData);

                       }if(AddSign === "2"){//在之后添加节点

                        var newnodeHtml =  creatNodeFormat(rightClickHtml,newValue);
                            parentObjxml.insertBefore(newnodeHtml,rightClickHtml.nextSibling);
                            addReturn(rightClickHtml,"",newValue);

                            clickId = newValue;
                            // console.info('----1.2----');
                            executeStep(filePath,windowData);
                       }
                   } else{//修改节点名
                        var oldnodeHtml =windowData.getElementsByTagName(clickId)[0];//选取那个节点的内容
                           nodeinfo_Id(oldnodeHtml,newValue);//更改节点名
                           // console.info('----2----');
                           executeStep(filePath,windowData);
                   }
                    
				}
                if (clickId === $("#nodeinfo-id").val()&&clickId!=''){
                   var oldnodeHtml =windowData.getElementsByTagName(clickId)[0];
    				if(e.target.id === 'nodeinfo-remark'){//节点描述
    					nodeinfo_Remark(oldnodeHtml,newValue);
                           // console.info('----3----');
                        executeStep(filePath,windowData);
    				}
    				if(e.target.id === 'mySelect'){//组件信息
    					mySelect(oldnodeHtml,newValue);
                           // console.info('---4-----');
                        executeStep(filePath,windowData);
    				}
                }
	 });
	 $("#nodeparam").on('change',function(e){
        if(clickId === $("#nodeinfo-id").val()&&clickId!=''){
    		var oldnodeHtml =windowData.getElementsByTagName(clickId)[0];//选取那个节点的内容
            var oTestParams = oldnodeHtml.getElementsByTagName('Params')[0];//那个节点的参数
    		var newValue  = e.target.value;//改变之后的值
    		 	if(e.target.className === 'param-id'){//参数名
    				param_Id(oTestParams,newValue,oldValue);
    			}
    			if(e.target.className === 'param-classname'){//参数值 
    			    var parent = $(e.target).parents('.param');
    			    var paramName =  parent.find('.param-id').val();
    				if(paramName ===''){
    					alert("请先输入参数名");
    					e.target.value =" ";
    				}else{
    			         param_Classname(oTestParams,paramName,newValue);
    				}	
    			}
                   // console.info('---5-----');
    		  executeStep(filePath,windowData);
        }else{
            alert('请先输入节点名');
            e.target.value = "";
        }
	 });
	 
	 $("#nodereturn").on('change',function(e){
        if(clickId === $("#nodeinfo-id").val()&&clickId!=''){
    		var oldnodeHtml =windowData.getElementsByTagName(clickId)[0];//选取那个节点的内容
    		var oTestReturn = oldnodeHtml.getElementsByTagName('Return')[0];//那个节点的返回值
    		var returnList =  oldnodeHtml.getElementsByTagName('switch');
    		var newValue  = e.target.value;//改变之后的值
    			if(e.target.className === 'return-id'){//返回参数
                  return_Id(oTestReturn,returnList,newValue,oldValue);
    			}
    			if(e.target.className === 'return-param'){//返回值
    				var parent = $(e.target).parents('.return');
    				var returnName =  parent.find('.return-id').val();//获取返回参数			
    				if(returnName === ''){//返回参数为空
    					alert('请先输入返回参数');
    					e.target.value = "";
    				}else{
    					return_Param(returnList,returnName,newValue);
    				}
    		   }
                  // console.info('-----6---');
                executeStep(filePath,windowData);
        }else{
            alert('请先输入节点名');
            e.target.value = "";
        }
	 });

	   // 标签页右键菜单-单击事件绑定
	$('#rightClickNode li a').on('click',function(e){
		if(this.id === "beforeAdd"){//在此之前添加一个节点
			AddSign = "1";
			creatNodeDisplay(e);
		}else if(this.id === "afterAdd"){//在此之后添加一个节点
            AddSign = "2";
            creatNodeDisplay(e);       //
		}else if(this.id === "delNode"){//删除该节点
				if(confirm("确定要删除此节点吗?")){
				 del_Nodeinfo();
				 $('#rightClickNode').css("display","none");
				 return true;
			    }
			 $('#rightClickNode').css("display","none");
				return false;
		     
		}
		     
		$('#rightClickNode').css("display","none");
	});


        // 标签页右键菜单-单击事件绑定
    $('#rightClickLine li a').on('click',function(e){
        var aNodeObj = windowData.getElementsByTagName(line_a)[0];
        var bNodeObj = windowData.getElementsByTagName(line_b)[0];
        if(this.id === "aTob"){//a->b
            addReturn(aNodeObj,"default",line_b);
            executeStep(filePath,windowData);
        }else if(this.id === "bToa"){//b->a
           addReturn(bNodeObj,"default",line_a);
           executeStep(filePath,windowData);
        }
        $('#rightClickLine').css("display","none");
    });

    $('#node-view').on('click',function(e){
        if(e.target.id === "newNode"){//点击空白节点
            window.newNodeBuild(rightClick,AddSign);
        }
        if(e.target.id ==="node-view"){//点击窗口空白地方
            line_a = '';
            line_b = '';
            $('#kitchensink-demo').find('.line-this').removeClass('line-this');
            $('#rightClickNode').css("display","none");
            $('#rightClickLine').css("display","none");
        }

    });
}


function creatNodeDisplay(e){
	//1创建空白节点
	var newNodeHtml = [];
	    newNodeHtml.push('<div class = "component window" id ="newNode" style="top:'+window.event.clientY+'px ;left:'+window.event.clientX+'px;"></div>');
	$('#kitchensink-demo').append(newNodeHtml.join('\n'));

	//2创建连线
	var addNoderender =[];
    if(AddSign ==="1"){
       addNoderender.push({source: ""+"newNode", 
                    target: "" + rightClick, 
                    label: ""+"default"});
       render(addNoderender); 
    }else if(AddSign ==="2"){
       addNoderender.push({source: ""+rightClick, 
                    target: "" + "newNode", 
                    label: ""});
       render(addNoderender);
    }	
	//3创建右侧空白div
	window.newNodeBuild(rightClick,AddSign);
}

    /**
     * 分析选定的step
     */
    function executeStep(xmlpath,_xmlObj) {
        $('#main').html('<div class="demo kitchensink-demo" id="kitchensink-demo"></div>');

        try{
            var xmlstr = downloadXmlfile(xmlpath);
            if (_xmlObj ===''){
                _xmlObj = $.text2xml(xmlstr); 
            }
            var root = _xmlObj.children[0];
            if(root.outerHTML.indexOf('This page contains the following errors:') > -1){
                // xml语法有误
                $('#main').html(root.outerHTML);
                return;
            }
            
            // 构建step模型
            stepModel =  buildStepModel(root);
            stepModel.id = xmlpath;
            $("#rootRemark").html(stepModel.remark);
            // 计算step位置
            positionStep(stepModel);
            // 构建step图形
            var renderData = buildStepHtml(stepModel);
            // 绘制连线
            render(renderData);
            //添加节点解析
            line_a = '';
            line_b = '';
            //节点点击
            $('#kitchensink-demo > div.component.window').click( function(e){
                $('#rightClickNode').css("display","none");//右键div的隐藏
                $('#rightClickLine').css("display","none");

                if (clickId && e.ctrlKey){//ctr键+点击
                    line_a = clickId;
                    line_b = this.id;
                    $('#kitchensink-demo').find('.line-this').removeClass('line-this');
                    var a =$('#kitchensink-demo > div#'+line_a).addClass('line-this'); 
                    var b = $('#kitchensink-demo > div#'+line_b).addClass('line-this');
                }
                   clickId = this.id;
                   window.nodeBuild(clickId,stepModel);//创建div
                   window.nodeinfo(clickId,stepModel);//输入div内的信息  
            });
		    //空白节点的右键点击
			$('#kitchensink-demo').on("mousedown",function(e){
				if(3 == e.which){
					if(e.target.id === "newNode"){
						rightClick = e.target.id;
						//alert(rightClick);
						if(rightClick){
							rightClick_style(e,"rightClickNode","","");
						}
					}
					
				}
			});
		    
			//鼠标点击
			$("#kitchensink-demo > div.component.window").on("mousedown",function(e){ 
				if(3 == e.which){//鼠标右击
                    if(this.id === line_b ){//显示连线
                        rightClick = this.id;//要写吗？
                        if(rightClick){ 
                            rightClick_style(e,"rightClickLine",line_a,line_b);
                        } 
                    }else{//显示节点
                        rightClick = this.id;
                        if(rightClick){ 
                            rightClick_style(e,"rightClickNode","","");
                        } 
                    }
                }
			});
            // 节点位置变化
            $('#kitchensink-demo > div.component.window').mouseup(savePositions);

            // 保存位置信息
            // savePositions();
            return _xmlObj;
        }catch(e){
            $('#main').html('<div style="padding-top:100px; text-align:center; color:red;">处理出错:'+e.stack+'</div>');
            console.info(e.stack);
        }
    }

    /**
     * 读取文件内容
     */
    function downloadXmlfile(xmlpath) {
        var xmlObj = fs.readFileSync(xmlpath, 'latin1');
        xmlObj = iconv.decode(xmlObj, 'GBK');
        // console.info(xmlObj);
        return xmlObj;
    }
    

/**
 * 构建step图形
 */
function buildStepHtml (stepModel) {
    
    var connectStr = [];
    var stepHtml = [];
    var nullNodeCount = 0;
        
    for (stepname in stepModel.stepmap){
        
        var stepitem = stepModel.stepmap[stepname];
        var nodeName = stepitem.nodeName;
        var itemclass = "component window " + stepitem.cssClass.join(" ");
        var top = stepitem.position.top || defaultTop;
        var left = stepitem.position.left || defaultLeft;
        var stepidclass = ['id'];
        top = top == 'auto' ? defaultTop : top;
        left = left == 'auto' ? defaultLeft : left;

        stepHtml.push('<div class="'+itemclass+'" id="'+nodeName+'" title="'
            + encodeHtml(stepitem.code)+'" style="top:'+top+';left:'+left+';">');

        if(stepitem.cssClass.indexOf('CallStep') >= 0 || stepitem.cssClass.indexOf('JumpStep') >= 0){
            stepHtml.push('<a id="'+stepitem.targetStep+'" target="_blank" href="../step/steps.html?stepid='+stepitem.targetStep+'&rdpdir='+rdpdir+'">');
            stepidclass.push('');
        }
        stepHtml.push('<div class="content"><span class="'+stepidclass.join(' ')+'">'+nodeName+'</span>');
        stepHtml.push('<span>'+stepitem.remark+'</span>');
        stepHtml.push('<span>'+stepitem.className+'</span>');
        stepHtml.push('</div>');
        if(stepitem.cssClass.indexOf('CallStep') >= 0 || stepitem.cssClass.indexOf('JumpStep') >= 0)
            stepHtml.push('</a>');
        stepHtml.push('</div>');

        for(returnName in stepitem.return){
            var returnNode = returnName;
            if(!stepModel.stepmap[returnNode]){
                returnNode = "nullNode";
                nullNodeCount++;
            }
            var returnDesc = stepitem.return[returnName]
            connectStr.push({source: ""+nodeName, 
                    target: "" + returnNode, 
                    label: "" + returnDesc});
        }
    }

    
    $('#kitchensink-demo').append(stepHtml.join('\n'));
    if(nullNodeCount > 0){
        $('#nullNode').show();
    }
    
    return connectStr;
}

function render (connectStr) {

    for(i in connectStr){
        var conn = connectStr[i];
        try{
            instance.connect(conn , stateMachineConnector);
        }catch(e){
            console.info("erred connectStr:%o",conn);
            console.info(e.stack);
        }
    }
    
    // make all .window divs draggable. note that here i am just using a convenience method - getSelector -
    // that enables me to reuse this code across all three libraries. In your own usage of jsPlumb you can use
    // your library's selector method - "$" for jQuery, "$$" for MooTools, "Y.all" for YUI3.
    //instance.draggable(jsPlumb.getSelector(".window"), { containment:".demo"});    
    instance.draggable(jsPlumb.getSelector(".window"), {
        drag:function() {
            //console.log("DRAG")
        }
    });    

    jsPlumb.fire("jsPlumbDemoLoaded", instance);
}

/**
 * 加载文件列表下拉数据
 */
function loadFilelistOptions(argument) {
    console.info('************');
    $.get("/rdp/selectStepOption", {}, function(list){
        console.info("xmlList,%o", list);
        var optionHtml = ["<options>"];
        optionHtml.push("<option value=''>----请选择---</option>");
        for(var i=0;i<list.length; i++){
            optionHtml.push("<option value='"+list[i]+"'>"+list[i]+"</option>");
        }
        optionHtml.push("</options>");
        $("#xmlFile").html(optionHtml.join("\n"));
     }, 'json');
}


function positionStep(stepModel) {
    var positionObj;

    if(fs.existsSync(postionConfPath)){
        var postionContent = fs.readFileSync(postionConfPath);
        try{positionObj = JSON.parse(postionContent);}catch(e){}
    }

    var allreturn = stepModel.allreturn;
    var nolinkinstep = stepModel.nolinkinstep;
    var topstart = 85, leftstart=30;
    // step坐标
    var x=1, y=1;
    // 每行7个step
    var xmax = 6;
    // 未使用的step统一到到第9列
    var nousex=9, nousey=1


    for(stepname in stepModel.stepmap){
        var step = stepModel.stepmap[stepname];
        if(typeof allreturn[stepname] == 'undefined'){
            nolinkinstep.push(step);

            if(countUsedReturn(step, stepModel) > 0){// 起始节点
                step.cssClass.push("startpoint");
                step.position = {x: x, y: y};
                x++;
            }else{// 无用节点
                step.cssClass.push("nouse");
                step.position = {x: nousex, y: nousey};
                nousey ++;
            }
        }else{
            step.position = {x: x, y: y};
            x++;
        }

        if(positionObj){
            try{
                step.position.top = positionObj[step.nodeName].top || '500px';
                step.position.left = positionObj[step.nodeName].left || '500px';

                // if(step.position.top == 'undefined' || step.position.left == 'undefined' 
                //     || step.position.top == 'auto' || step.position.left == 'auto'
                //     || (step.position.top == '85px' && step.position.left == '30px')){
                //     step.position.top = '500px';
                //     step.position.left = '500px';
                // }

            }catch(e){
                
            }
        }else{
            step.position.top = topstart + (step.position.y -1) * 145;
            step.position.top = step.position.top + "px";
            step.position.left = leftstart + (step.position.x - 1) * 185;
            step.position.left = step.position.left + "px";
        }
        

        if( x > xmax){
            y ++;
            x = 1;
        }
    }

    return stepModel;
}

function countUsedReturn(destStep, stepModel) {
    if(destStep.returnSize < 1){
        return 0;
    }else{
        var count = 0;
        for(returnName in destStep.return){
            if(typeof stepModel.stepmap[returnName] != 'undefined'){
                count ++;
            }
        }
        return count;
    }
}

/**
 * 构建step模型。
 * {
        id: "",
        stepmap: {},
        steplist: [],
        noreturnstep: [],
        allreturn: {},
        nolinkinstep: [],
        nousestep:[]
    }
 */
function buildStepModel(root) {
    var myStep = {
            remark: root.getAttribute('Remark'),
            stepmap: {}, 
            steplist: [], 
            noreturnstep: [],
            allreturn: {},
            nolinkinstep: [],
            nousestep:[],
            position:{}
        };

    for(var i=0; i<root.children.length; i++){
        var item = root.children[i];
        var step;
        try{
            step = buildStepItem(item);
        }catch(e){
            continue;
            console.info(item.innerHTML);
            }
            if(step.returnSize < 1){
                myStep.noreturnstep.push(step);
            }else{
                for(nodeName in step.return){
                    myStep.allreturn[nodeName] = nodeName;
                }
            }
            myStep.stepmap[step.nodeName] = step;
        }

    // 添加无效节点
    myStep.stepmap['nullNode'] = {
            code:'--',
            nodeName:'nullNode',
            remark:'无效节点',
            className:'',
            returnSize: 0,
            cssClass: ['nullNode'],
            position: {top:50, left:50}
       };
    return myStep;
}


/**
 * 构建单个step对象
   {
        code:'',
        nodeName:'',
        remark:'',
        className:'',
        return:{nodeName: caseName},
        returnSize: size,
        cssClass: [],
        position: {top:, left:}
   }
 */
function buildStepItem(item) {
    var step = {};
    step.code = item.outerHTML;
    step.nodeName = item.nodeName;
    step.remark = item.getAttribute('Remark');
    step.className = item.getElementsByTagName('ClassName')[0].textContent;
    step.cssClass = [step.className];
    
	step.param ={};
    step.return = {};
    step.returnSize = 0;
	step.paramSize =0;
    var returnObj = item.getElementsByTagName('Return');
	var paramObj = item.getElementsByTagName('Params');
    if(returnObj.length > 0){
        var retObj = returnObj[0];
        var switchs = retObj.getElementsByTagName('switch');
        for(var n=0; n<switchs.length; n++){
            var switchObj = switchs[n];

            step.return[switchObj.textContent] = switchObj.getAttribute('case');
            step.returnSize ++;
        }
    }

	 if(paramObj.length > 0){
        var parObj = paramObj[0];
        var params = parObj.getElementsByTagName('*');
        for(var n=0; n<params.length; n++){
            var paramsObj = params[n];
            step.param[paramsObj.textContent] = paramsObj.tagName;
            step.paramSize ++;
        }
    }

    if(step.className == 'CallStep' || step.className == 'JumpStep'){
        var paramObj = item.getElementsByTagName('Params')[0];
        step.targetStep = paramObj.getElementsByTagName('Step')[0].innerHTML;
    }

    if(step.returnSize < 1){
        step.cssClass.push("endpoint");
    }

    return step;
}


/**
 * 对html进行转义
 */
function encodeHtml(s){
      return (typeof s != "string") ? s :
          s.replace(/"|&|'|<|>|[\x00-\x20]|[\x7F-\xFF]|[\u0100-\u2700]/g,
				function($0){
					var c = $0.charCodeAt(0), r = ["&#"];
					c = (c == 0x20) ? 0xA0 : c;
					r.push(c); r.push(";");
					return r.join("");
				});
};


/**
 * 保存节点位置信息。
 * 2秒钟自动保存
 */
function savePositions(argument) {

    var positions = {};
    $('#kitchensink-demo > div.component.window').each(function(item){
        positions[this.id] = {top: $(this).css('top'), left: $(this).css('left')};
    });

    positions = {id: stepModel.id, values: JSON.stringify(positions)};
    // positions = JSON.stringify(positions);
    positions = positions.values;
    if(lastpostionstr != positions){
        console.info("节点位置发生变化，保存位置信息...");
        lastpostionstr = positions;
        // $.post("/rdp/position/save", positions, function(res){});
        try{
            fs.writeFileSync(postionConfPath, positions);
        }catch(e){
            console.debug(e);

        }
    }else{
        // 位置信息无变化，不需要保存。
    }

}

/**
 * 重置位置
 */
function resetPosition(argument) {
    if(!stepModel.id){
        alert("当前未打开流程文件");
        return;
    }
    if(window.confirm("确定要重置位置信息吗？")){
        $.post("/rdp/position/reset", JSON.stringify({id: stepModel.id}), function(res){
            $("#reloadFilelist").click();
        });
    }
    
}

/**
 * 联动打开制定流程图。
 */
function openStepview(id) {
    console.debug(id);
    ipcRenderer.send('viewEvent', 'open', id+".xml");
}

/**
 * 舒适化配置文件路径
 */
function initConfigDir(argument) {
    var rootdir = localStorage.getItem('projectDir');
    // try{fs.accessSync(rootdir + "/.ide")){
    try{
        fs.mkdirSync(rootdir + "/.ide");
        fs.mkdirSync(rootdir + "/.ide/position");
    }catch(e){}
}
initApp();

//---------------------------------------------------------------------------------------------------------
    /*选取指定的返回值*/
	function  selectRetNode(retList,sign){
		 for(var i = 0;i<retList.length;i++){
			 if(retList[i].getAttribute('case')==sign){
				return retList[i];
			  }
		 }
     }
	 //节点名修改
	 function nodeinfo_Id(xmlObj,newVal){
		try{
			var modify_Node_Name = xmlObj.ownerDocument.createElement(newVal);
			var mark = xmlObj.getAttribute("Remark");
			modify_Node_Name.setAttribute("Remark",mark)||"";
			modify_Node_Name.innerHTML  = xmlObj.innerHTML;
			xmlObj.ownerDocument.children[0].replaceChild(modify_Node_Name,xmlObj);//替换
			$('#kitchensink-demo > div.component.window#'+clickId).attr("id","newVal");//html 中id名称的修改
			clickId = newVal;
		}catch(e){
		   console.debug(e);
		}
    }
	//节点描述修改
	function nodeinfo_Remark(xmlObj,newVal){
		xmlObj.setAttribute("Remark",newVal);
	}	
   //组件信息修改
	function mySelect(xmlObj,newVal){
		var className = xmlObj.getElementsByTagName('ClassName')[0];
		className.innerHTML = newVal;	
	}
	 //参数名的增加或修改
	function param_Id(xmlObj,newVal,oldVal){
		try{
		   if(oldVal === ''){//增加
			 var beforeParam = xmlObj.firstElementChild;
			 var newNode = xmlObj.ownerDocument.createElement(newVal);
				 newNode.innerHTML = " ";
				 xmlObj.insertBefore(newNode,beforeParam);
			}else if(oldVal != ''){//修改
				var param =	xmlObj.getElementsByTagName(oldVal)[0];
				var modify_Param_Name = param.ownerDocument.createElement(newVal);
				var mark = param.getAttribute("Remark")||"";
					modify_Param_Name.setAttribute("Remark",mark);
				modify_Param_Name.innerHTML  = param.innerHTML;
				param.parentElement.replaceChild(modify_Param_Name,param);
		   }
	   }catch(e){
		  console.debug(e);
	   }
	}
	//参数值的增加或修改
	function param_Classname(xmlObj,parName,newVal){
		var param =	xmlObj.getElementsByTagName(parName)[0];
			param.innerHTML  = newVal;

	}	
	//返回参数的增加或修改
	 function return_Id(xmlObj,retList,newVal,oldVal){
		  if(oldVal ===''){//增加	
			var beforeReturn = xmlObj.firstElementChild;
			var	newReturn = xmlObj.ownerDocument.createElement("switch");
				newReturn.setAttribute("case", newVal);
				newReturn.innerHTML =" ";
			xmlObj.insertBefore(newReturn,beforeReturn);
		  }else{//修改
				var returnSign  =  selectRetNode(retList ,oldVal);
				returnSign.setAttribute('case',newVal);		
		  }	
	  }
	 //返回值的增加或修改
	function return_Param(retList,retName,newVal){
		var returnSign  =  selectRetNode(retList ,retName);
		returnSign.innerHTML = newVal;
	}

	//节点参数信息的删除
	function del_Nodeparam(e,xmlObj){
		var parent = $(e.target).parents('.param');
		var nodeId =  parent.find('.param-id').val();
		if(nodeId !=""){
		   var oTestParams = xmlObj.getElementsByTagName('Params')[0];
		   var removPram = oTestParams.getElementsByTagName(nodeId)[0];
		   oTestParams.removeChild(removPram);
		}
		e.target.parentNode.remove();
	}
	//节点返回信息的删除
	function del_Nodereturn(e,xmlObj){
		var parent = $(e.target).parents('.return');
		var retNodeId =  parent.find('.return-id').val();
		if(retNodeId !=""){
		   var oTestReturn = xmlObj.getElementsByTagName('Return')[0];
		   var returnList =  xmlObj.getElementsByTagName('switch');
		   var returnSign  =  selectRetNode(returnList ,retNodeId);
		   oTestReturn.removeChild(returnSign);
		}
		e.target.parentNode.remove();//节点返回值参数的删除
	}
	//右键点击节点信息的删除
	function  del_Nodeinfo(){
		  if(rightClick=="newNode"){//右击的节点id是不是空白节点id
			   var thisNode=document.getElementById("newNode");
             thisNode.parentNode.removeChild(thisNode);
		  }else{
              var oldnodeHtml = windowData.getElementsByTagName(rightClick)[0];
			    var oTestNode = windowData.children[0];
				oTestNode.removeChild(oldnodeHtml);  
		  }
				executeStep(filePath,windowData);
	}
	//鼠标右击样式  后期调整！！！
	function rightClick_style(e,id,aString,bString){
		var titleWidth = $('#node-view').width();
		var sign = 275;
		var divWidth = $('#'+id).width();

        if(aString && bString){
            $('#'+id+' .action-label')[0].innerHTML = "分支流向 "+aString+"--"+bString;
            $('#'+id+' .action-label')[1].innerHTML = "分支流向 "+bString+"--"+aString;
        }

		if( $('#'+id).is(':hidden') ){
			 $('#'+id).css("display","block");
			//鼠标坐标+div宽度 = 标题宽+固定值
			if((e.clientX + divWidth) >(titleWidth+sign)){ 
				$('#'+id).css("left", e.clientX - sign*(2/3) ); 
				$('#'+id).css("margin-top", e.clientY+1); 
			}else{
				$('#'+id).css("left", e.clientX); 
				$('#'+id).css("margin-top", e.clientY+1); 
			}
		}else{
			 $('#'+id).css("display","none");
		}
	}

    /**
     * 创建新节点结构
     */
	function creatNodeFormat(xmlObj,newValue){

        var newnodeHtml = xmlObj.ownerDocument.createElement(newValue);//新增加的
            newnodeHtml.setAttribute("Remark","");

        var className = newnodeHtml.ownerDocument.createElement('ClassName');//组件信息
            className.innerHTML = " "; 
        newnodeHtml.appendChild(className);  

        var paramsName = newnodeHtml.ownerDocument.createElement('Params');//参数信息
            paramsName.innerHTML = " "; 
        newnodeHtml.appendChild(paramsName); 

        var returnsName = newnodeHtml.ownerDocument.createElement('Return');//返回值信息
            if(AddSign === "1"){
               returnsName.innerHTML = "<switch case='default'>"+rightClick+"</switch>"; 
            }else{
               returnsName.innerHTML = " ";  
            }
        newnodeHtml.appendChild(returnsName); 
        return newnodeHtml;
    }

/**
 * 给节点添加一个返回项
 */
  function addReturn(xmlObj,caseValue,stepValue){
    var rightReturnHtml =xmlObj.getElementsByTagName("Return")[0];
    var rightReturnParam = rightReturnHtml.ownerDocument.createElement('switch');//参数信息
        rightReturnParam.setAttribute("case",caseValue);
        rightReturnParam.innerHTML = stepValue;
        rightReturnHtml.appendChild(rightReturnParam); 
  }





    window.popViewData = function(){
        return windowData;
    }
    window.getViewData_bak = function(){
        return windowData_bak;
    }


});


